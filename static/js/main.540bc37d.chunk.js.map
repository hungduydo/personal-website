{"version":3,"sources":["partials/footer/index.js","partials/header/index.js","app.js","serviceWorker.js","index.js"],"names":["Footer","className","data-anchor","Row","Col","icon","link","map","it","index","href","key","target","Header","title","ref","item","i","Homepage","lazy","library","add","fab","faEnvelope","Boolean","window","location","hostname","match","Component","root","document","getElementById","history","createBrowserHistory","Application","render","renderContainer","fallback","path","component","to","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oVA4BeA,G,MAvBA,WASb,OACE,yBAAKC,UAAU,SAASC,cAAY,UAClC,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,uBAAGH,UAAU,yBAZD,CAClB,CAAEI,KAAM,aAAcC,KAAM,uDAC5B,CAAED,KAAM,WAAYC,KAAM,uEAC1B,CAAED,KAAM,QAASC,KAAM,0BACvB,CAAED,KAAM,SAAUC,KAAM,gCACxB,CAAED,KAAM,YAAaC,KAAM,2CASLC,KAAI,SAACC,EAAIC,GAAL,OAAgB,uBAAGC,KAAMF,EAAGF,KAAMK,IAAKF,EAAOG,OAAO,KAAI,kBAAC,IAAD,CAAiBP,KAAM,CAAC,MAAOG,EAAGH,kBCF1GQ,G,MAdA,WAGb,OAAQ,yBAAKZ,UAAU,UACrB,4BAHgB,CAAC,CAAEa,MAAO,OAAQC,IAAK,UAAY,CAAED,MAAO,QAASC,IAAK,SAAW,CAAED,MAAO,SAAUC,IAAK,UAAY,CAAED,MAAO,QAASC,IAAK,SAAW,CAAED,MAAO,UAAWC,IAAK,YAKtKR,KAAI,SAACS,EAAMC,GAAP,OAAa,wBAAIN,IAAKM,GAAG,uBAAGP,KAAI,WAAMM,EAAKD,MAAQC,EAAKF,eCDxEI,EAAWC,gBAAK,kBAAM,sDAE5BC,IAAQC,IAAIC,IAAKC,K,MCCGC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,4DCRkB,SAAAC,GACpB,IAAMC,EAAOC,SAASC,eAAe,QAC/BC,EAAUC,cAEVC,EAEF,kBAAC,IAAD,CAAQF,QAASA,GACb,kBAACJ,EAAD,OAMRO,iBAAOD,EAAaL,GAGxBO,EFbmB,WAEjB,OACE,yBAAKpC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,WAAD,CAAUqC,SAAU,4CAElB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWtB,IAC3B,kBAAC,IAAD,CAAOqB,KAAK,KACV,kBAAC,IAAD,CAAUE,GAAG,SAMnB,kBAAC,EAAD,UCsGA,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.540bc37d.chunk.js","sourcesContent":["import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport { Col, Row } from 'react-bootstrap';\nimport './footer.scss';\n\nconst Footer = () => {\n  const socialLinks = [\n    { icon: 'facebook-f', link: 'https://www.facebook.com/duyhung.do.3?ref=bookmarks' },\n    { icon: 'linkedin', link: 'https://www.linkedin.com/in/%C4%91%E1%BB%97-duy-h%C6%B0ng-8a840a70/' },\n    { icon: 'skype', link: 'skype:live:duyhung0124' },\n    { icon: 'github', link: 'https://github.com/hungduydo' },\n    { icon: 'instagram', link: 'https://www.instagram.com/fun_house38/' },\n  ];\n\n  return (\n    <div className=\"footer\" data-anchor=\"footer\">\n      <Row>\n        <Col>\n          <p className=\"banner__social footer\">\n            {\n              socialLinks.map((it, index) => (<a href={it.link} key={index} target=\"#\"><FontAwesomeIcon icon={['fab', it.icon]} /></a>))\n            }\n          </p>\n        </Col>\n      </Row>\n    </div>);\n}\n\nexport default Footer;","import React from 'react';\nimport './header.scss';\nimport { Link } from 'react-router-dom';\n\nconst Header = () => {\n  const menuItems = [{ title: 'Home', ref: 'banner' }, { title: 'About', ref: 'about' }, { title: 'Resume', ref: 'resume' }, { title: 'Works', ref: 'works' }, { title: 'Contact', ref: 'contact' }];\n\n  return (<div className=\"header\">\n    <ul>\n      {\n        menuItems.map((item, i) => <li key={i}><a href={`#${item.ref}`}>{item.title}</a></li>)\n        // Use react Link made app navigation wrong\n        // menuItems.map((item, i) => <li key={i}><Link to={`#${item.ref}`}>{item.title}</Link></li>)\n      }\n    </ul>\n  </div>)\n}\n\nexport default Header;","import { library } from '@fortawesome/fontawesome-svg-core';\nimport { fab } from '@fortawesome/free-brands-svg-icons';\nimport { faEnvelope } from '@fortawesome/free-solid-svg-icons';\nimport React, { lazy, Suspense } from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport './app.css';\nimport Footer from './partials/footer';\nimport Header from './partials/header';\n\nconst Homepage = lazy(() => import(\"./screens/home\"));\n\nlibrary.add(fab, faEnvelope)\n\nexport const App = () => {\n\n  return (\n    <div className=\"app\">\n      <Header></Header>\n      <Suspense fallback={<div>Loading...</div>}>\n\n        <Switch>\n          <Route path=\"/\" component={Homepage} />\n          <Route path=\"*\">\n            <Redirect to=\"/\"></Redirect>\n          </Route>\n        </Switch>\n\n      </Suspense>\n\n      <Footer></Footer>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport { createBrowserHistory } from 'history';\nimport React from 'react';\nimport { render } from 'react-dom';\nimport { Router } from 'react-router-dom';\nimport { App } from './app';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\nconst renderContainer = Component => {\n    const root = document.getElementById(\"root\");\n    const history = createBrowserHistory();\n\n    const Application = (\n\n        <Router history={history}>\n            <Component />\n        </Router>\n\n    );\n\n    // render component\n    render(Application, root);\n};\n\nrenderContainer(App);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}